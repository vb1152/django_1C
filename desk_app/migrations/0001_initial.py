# Generated by Django 3.1.5 on 2021-01-23 17:11

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    atomic = False
    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='IC_scu',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scu_name', models.CharField(blank=True, max_length=70)),
                ('scu_code', models.CharField(max_length=9)),
                ('scu_guid', models.CharField(max_length=36, unique=True)),
                ('unit_measure', models.CharField(blank=True, max_length=2)),
                ('scu_article', models.CharField(max_length=5)),
                ('scu_barcode', models.CharField(blank=True, max_length=13)),
                ('ret_price', models.PositiveSmallIntegerField(null=True)),
                ('who_price', models.PositiveSmallIntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ICparams',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(help_text='Назва хосту. Напр.: http://localhost', max_length=64)),
                ('port_IC', models.CharField(blank=True, help_text='Номер порту (:80 або :443)', max_length=8)),
                ('base_IC_name', models.CharField(help_text='Назва бази 1С. Напр.: /base ', max_length=64)),
                ('odata_url', models.CharField(help_text='/odata/standard.odata', max_length=64)),
                ('sessionIC_login', models.CharField(help_text='Логін доступу в 1С. Напр.: Админ', max_length=64)),
                ('sessionIC_password', models.CharField(help_text='Пароль доступу в 1С', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Prices_type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price_name', models.CharField(max_length=15)),
                ('price_code', models.CharField(max_length=36, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Producers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('producer_guid', models.CharField(max_length=36, unique=True)),
                ('producer_name', models.CharField(blank=True, max_length=100)),
                ('short_prod_name', models.CharField(blank=True, max_length=100)),
                ('contact_data', models.CharField(blank=True, max_length=200)),
                ('email_order', models.EmailField(blank=True, max_length=254)),
                ('info_field', models.TextField(blank=True, max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='SalesForAbc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('cost', models.DecimalField(decimal_places=2, max_digits=10, null=True)),
                ('abc_result', models.CharField(max_length=3)),
                ('start_salesData', models.DateField(blank=True)),
                ('end_salesData', models.DateField(blank=True)),
                ('scu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scu_guid_data', to='desk_app.ic_scu')),
            ],
        ),
        migrations.CreateModel(
            name='SafetyStock',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('safe_stock', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('multipl', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('only_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('stock_max', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('provider', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='produser_safety_stock', to='desk_app.producers')),
                ('scu', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scu_safety_stock', to='desk_app.ic_scu')),
            ],
        ),
        migrations.CreateModel(
            name='ICgroups',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(blank=True, max_length=70)),
                ('group_code', models.CharField(max_length=9)),
                ('group_guid', models.CharField(max_length=36, unique=True)),
                ('is_folder', models.BooleanField()),
                ('parent_guid', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='desk_app.icgroups')),
            ],
        ),
        migrations.AddField(
            model_name='ic_scu',
            name='scu_parent_guid',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scu_parentgroup_guid', to='desk_app.icgroups'),
        ),
        migrations.AddField(
            model_name='ic_scu',
            name='scu_produser',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='scu_produser_rel_name', to='desk_app.producers'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
